/*
Copyright 2023 TensorChord Inc.

Licensed under the MIT license. See LICENSE file in the project root for full license information.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	modelzetesv1 "github.com/tensorchord/openmodelz/ingress-operator/pkg/apis/modelzetes/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeInferenceIngresses implements InferenceIngressInterface
type FakeInferenceIngresses struct {
	Fake *FakeTensorchordV1
	ns   string
}

var inferenceingressesResource = schema.GroupVersionResource{Group: "tensorchord.ai", Version: "v1", Resource: "inferenceingresses"}

var inferenceingressesKind = schema.GroupVersionKind{Group: "tensorchord.ai", Version: "v1", Kind: "InferenceIngress"}

// Get takes name of the inferenceIngress, and returns the corresponding inferenceIngress object, and an error if there is any.
func (c *FakeInferenceIngresses) Get(ctx context.Context, name string, options v1.GetOptions) (result *modelzetesv1.InferenceIngress, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(inferenceingressesResource, c.ns, name), &modelzetesv1.InferenceIngress{})

	if obj == nil {
		return nil, err
	}
	return obj.(*modelzetesv1.InferenceIngress), err
}

// List takes label and field selectors, and returns the list of InferenceIngresses that match those selectors.
func (c *FakeInferenceIngresses) List(ctx context.Context, opts v1.ListOptions) (result *modelzetesv1.InferenceIngressList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(inferenceingressesResource, inferenceingressesKind, c.ns, opts), &modelzetesv1.InferenceIngressList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &modelzetesv1.InferenceIngressList{ListMeta: obj.(*modelzetesv1.InferenceIngressList).ListMeta}
	for _, item := range obj.(*modelzetesv1.InferenceIngressList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested inferenceIngresses.
func (c *FakeInferenceIngresses) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(inferenceingressesResource, c.ns, opts))

}

// Create takes the representation of a inferenceIngress and creates it.  Returns the server's representation of the inferenceIngress, and an error, if there is any.
func (c *FakeInferenceIngresses) Create(ctx context.Context, inferenceIngress *modelzetesv1.InferenceIngress, opts v1.CreateOptions) (result *modelzetesv1.InferenceIngress, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(inferenceingressesResource, c.ns, inferenceIngress), &modelzetesv1.InferenceIngress{})

	if obj == nil {
		return nil, err
	}
	return obj.(*modelzetesv1.InferenceIngress), err
}

// Update takes the representation of a inferenceIngress and updates it. Returns the server's representation of the inferenceIngress, and an error, if there is any.
func (c *FakeInferenceIngresses) Update(ctx context.Context, inferenceIngress *modelzetesv1.InferenceIngress, opts v1.UpdateOptions) (result *modelzetesv1.InferenceIngress, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(inferenceingressesResource, c.ns, inferenceIngress), &modelzetesv1.InferenceIngress{})

	if obj == nil {
		return nil, err
	}
	return obj.(*modelzetesv1.InferenceIngress), err
}

// Delete takes name of the inferenceIngress and deletes it. Returns an error if one occurs.
func (c *FakeInferenceIngresses) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(inferenceingressesResource, c.ns, name), &modelzetesv1.InferenceIngress{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeInferenceIngresses) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(inferenceingressesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &modelzetesv1.InferenceIngressList{})
	return err
}

// Patch applies the patch and returns the patched inferenceIngress.
func (c *FakeInferenceIngresses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *modelzetesv1.InferenceIngress, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(inferenceingressesResource, c.ns, name, pt, data, subresources...), &modelzetesv1.InferenceIngress{})

	if obj == nil {
		return nil, err
	}
	return obj.(*modelzetesv1.InferenceIngress), err
}
