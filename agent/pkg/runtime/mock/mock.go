// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/runtime/runtime.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	types "github.com/tensorchord/openmodelz/agent/api/types"
	config "github.com/tensorchord/openmodelz/agent/pkg/config"
	v2alpha1 "github.com/tensorchord/openmodelz/modelzetes/pkg/apis/modelzetes/v2alpha1"
)

// MockRuntime is a mock of Runtime interface.
type MockRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeMockRecorder
}

// MockRuntimeMockRecorder is the mock recorder for MockRuntime.
type MockRuntimeMockRecorder struct {
	mock *MockRuntime
}

// NewMockRuntime creates a new mock instance.
func NewMockRuntime(ctrl *gomock.Controller) *MockRuntime {
	mock := &MockRuntime{ctrl: ctrl}
	mock.recorder = &MockRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntime) EXPECT() *MockRuntimeMockRecorder {
	return m.recorder
}

// BuildCreate mocks base method.
func (m *MockRuntime) BuildCreate(ctx context.Context, req types.Build, inference *v2alpha1.Inference, builderImage, buildkitdAddress, buildCtlBin, secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildCreate", ctx, req, inference, builderImage, buildkitdAddress, buildCtlBin, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildCreate indicates an expected call of BuildCreate.
func (mr *MockRuntimeMockRecorder) BuildCreate(ctx, req, inference, builderImage, buildkitdAddress, buildCtlBin, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildCreate", reflect.TypeOf((*MockRuntime)(nil).BuildCreate), ctx, req, inference, builderImage, buildkitdAddress, buildCtlBin, secret)
}

// BuildGet mocks base method.
func (m *MockRuntime) BuildGet(ctx context.Context, namespace, buildName string) (types.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildGet", ctx, namespace, buildName)
	ret0, _ := ret[0].(types.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildGet indicates an expected call of BuildGet.
func (mr *MockRuntimeMockRecorder) BuildGet(ctx, namespace, buildName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildGet", reflect.TypeOf((*MockRuntime)(nil).BuildGet), ctx, namespace, buildName)
}

// BuildList mocks base method.
func (m *MockRuntime) BuildList(ctx context.Context, namespace string) ([]types.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildList", ctx, namespace)
	ret0, _ := ret[0].([]types.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildList indicates an expected call of BuildList.
func (mr *MockRuntimeMockRecorder) BuildList(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildList", reflect.TypeOf((*MockRuntime)(nil).BuildList), ctx, namespace)
}

// GetClusterInfo mocks base method.
func (m *MockRuntime) GetClusterInfo(cluster *types.ManagedCluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterInfo", cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetClusterInfo indicates an expected call of GetClusterInfo.
func (mr *MockRuntimeMockRecorder) GetClusterInfo(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterInfo", reflect.TypeOf((*MockRuntime)(nil).GetClusterInfo), cluster)
}

// ImageCacheCreate mocks base method.
func (m *MockRuntime) ImageCacheCreate(ctx context.Context, req types.ImageCache, inference *v2alpha1.Inference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageCacheCreate", ctx, req, inference)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImageCacheCreate indicates an expected call of ImageCacheCreate.
func (mr *MockRuntimeMockRecorder) ImageCacheCreate(ctx, req, inference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageCacheCreate", reflect.TypeOf((*MockRuntime)(nil).ImageCacheCreate), ctx, req, inference)
}

// InferenceCreate mocks base method.
func (m *MockRuntime) InferenceCreate(ctx context.Context, req types.InferenceDeployment, cfg config.IngressConfig, event string, serverPort int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferenceCreate", ctx, req, cfg, event, serverPort)
	ret0, _ := ret[0].(error)
	return ret0
}

// InferenceCreate indicates an expected call of InferenceCreate.
func (mr *MockRuntimeMockRecorder) InferenceCreate(ctx, req, cfg, event, serverPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferenceCreate", reflect.TypeOf((*MockRuntime)(nil).InferenceCreate), ctx, req, cfg, event, serverPort)
}

// InferenceDelete mocks base method.
func (m *MockRuntime) InferenceDelete(ctx context.Context, namespace, inferenceName, ingressNamespace, event string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferenceDelete", ctx, namespace, inferenceName, ingressNamespace, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// InferenceDelete indicates an expected call of InferenceDelete.
func (mr *MockRuntimeMockRecorder) InferenceDelete(ctx, namespace, inferenceName, ingressNamespace, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferenceDelete", reflect.TypeOf((*MockRuntime)(nil).InferenceDelete), ctx, namespace, inferenceName, ingressNamespace, event)
}

// InferenceExec mocks base method.
func (m *MockRuntime) InferenceExec(ctx *gin.Context, namespace, instance string, commands []string, tty bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferenceExec", ctx, namespace, instance, commands, tty)
	ret0, _ := ret[0].(error)
	return ret0
}

// InferenceExec indicates an expected call of InferenceExec.
func (mr *MockRuntimeMockRecorder) InferenceExec(ctx, namespace, instance, commands, tty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferenceExec", reflect.TypeOf((*MockRuntime)(nil).InferenceExec), ctx, namespace, instance, commands, tty)
}

// InferenceGet mocks base method.
func (m *MockRuntime) InferenceGet(namespace, inferenceName string) (*types.InferenceDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferenceGet", namespace, inferenceName)
	ret0, _ := ret[0].(*types.InferenceDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferenceGet indicates an expected call of InferenceGet.
func (mr *MockRuntimeMockRecorder) InferenceGet(namespace, inferenceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferenceGet", reflect.TypeOf((*MockRuntime)(nil).InferenceGet), namespace, inferenceName)
}

// InferenceGetCRD mocks base method.
func (m *MockRuntime) InferenceGetCRD(namespace, name string) (*v2alpha1.Inference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferenceGetCRD", namespace, name)
	ret0, _ := ret[0].(*v2alpha1.Inference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferenceGetCRD indicates an expected call of InferenceGetCRD.
func (mr *MockRuntimeMockRecorder) InferenceGetCRD(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferenceGetCRD", reflect.TypeOf((*MockRuntime)(nil).InferenceGetCRD), namespace, name)
}

// InferenceInstanceList mocks base method.
func (m *MockRuntime) InferenceInstanceList(namespace, inferenceName string) ([]types.InferenceDeploymentInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferenceInstanceList", namespace, inferenceName)
	ret0, _ := ret[0].([]types.InferenceDeploymentInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferenceInstanceList indicates an expected call of InferenceInstanceList.
func (mr *MockRuntimeMockRecorder) InferenceInstanceList(namespace, inferenceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferenceInstanceList", reflect.TypeOf((*MockRuntime)(nil).InferenceInstanceList), namespace, inferenceName)
}

// InferenceList mocks base method.
func (m *MockRuntime) InferenceList(namespace string) ([]types.InferenceDeployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferenceList", namespace)
	ret0, _ := ret[0].([]types.InferenceDeployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InferenceList indicates an expected call of InferenceList.
func (mr *MockRuntimeMockRecorder) InferenceList(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferenceList", reflect.TypeOf((*MockRuntime)(nil).InferenceList), namespace)
}

// InferenceScale mocks base method.
func (m *MockRuntime) InferenceScale(ctx context.Context, namespace string, req types.ScaleServiceRequest, inf *types.InferenceDeployment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferenceScale", ctx, namespace, req, inf)
	ret0, _ := ret[0].(error)
	return ret0
}

// InferenceScale indicates an expected call of InferenceScale.
func (mr *MockRuntimeMockRecorder) InferenceScale(ctx, namespace, req, inf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferenceScale", reflect.TypeOf((*MockRuntime)(nil).InferenceScale), ctx, namespace, req, inf)
}

// InferenceUpdate mocks base method.
func (m *MockRuntime) InferenceUpdate(ctx context.Context, namespace string, req types.InferenceDeployment, event string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InferenceUpdate", ctx, namespace, req, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// InferenceUpdate indicates an expected call of InferenceUpdate.
func (mr *MockRuntimeMockRecorder) InferenceUpdate(ctx, namespace, req, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InferenceUpdate", reflect.TypeOf((*MockRuntime)(nil).InferenceUpdate), ctx, namespace, req, event)
}

// NamespaceCreate mocks base method.
func (m *MockRuntime) NamespaceCreate(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceCreate", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// NamespaceCreate indicates an expected call of NamespaceCreate.
func (mr *MockRuntimeMockRecorder) NamespaceCreate(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceCreate", reflect.TypeOf((*MockRuntime)(nil).NamespaceCreate), ctx, name)
}

// NamespaceDelete mocks base method.
func (m *MockRuntime) NamespaceDelete(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceDelete", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// NamespaceDelete indicates an expected call of NamespaceDelete.
func (mr *MockRuntimeMockRecorder) NamespaceDelete(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceDelete", reflect.TypeOf((*MockRuntime)(nil).NamespaceDelete), ctx, name)
}

// NamespaceGet mocks base method.
func (m *MockRuntime) NamespaceGet(ctx context.Context, name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceGet", ctx, name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NamespaceGet indicates an expected call of NamespaceGet.
func (mr *MockRuntimeMockRecorder) NamespaceGet(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceGet", reflect.TypeOf((*MockRuntime)(nil).NamespaceGet), ctx, name)
}

// NamespaceList mocks base method.
func (m *MockRuntime) NamespaceList(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceList", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamespaceList indicates an expected call of NamespaceList.
func (mr *MockRuntimeMockRecorder) NamespaceList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceList", reflect.TypeOf((*MockRuntime)(nil).NamespaceList), ctx)
}

// ServerDeleteNode mocks base method.
func (m *MockRuntime) ServerDeleteNode(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerDeleteNode", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerDeleteNode indicates an expected call of ServerDeleteNode.
func (mr *MockRuntimeMockRecorder) ServerDeleteNode(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerDeleteNode", reflect.TypeOf((*MockRuntime)(nil).ServerDeleteNode), ctx, name)
}

// ServerLabelCreate mocks base method.
func (m *MockRuntime) ServerLabelCreate(ctx context.Context, name string, spec types.ServerSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerLabelCreate", ctx, name, spec)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerLabelCreate indicates an expected call of ServerLabelCreate.
func (mr *MockRuntimeMockRecorder) ServerLabelCreate(ctx, name, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerLabelCreate", reflect.TypeOf((*MockRuntime)(nil).ServerLabelCreate), ctx, name, spec)
}

// ServerList mocks base method.
func (m *MockRuntime) ServerList(ctx context.Context) ([]types.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerList", ctx)
	ret0, _ := ret[0].([]types.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerList indicates an expected call of ServerList.
func (mr *MockRuntimeMockRecorder) ServerList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerList", reflect.TypeOf((*MockRuntime)(nil).ServerList), ctx)
}
