// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: deployment_events.sql

package query

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createDeploymentEvent = `-- name: CreateDeploymentEvent :one
INSERT INTO deployment_events (
    user_id, deployment_id, event_type, message
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, created_at, user_id, deployment_id, message, event_type
`

type CreateDeploymentEventParams struct {
	UserID       uuid.NullUUID  `json:"user_id"`
	DeploymentID uuid.NullUUID  `json:"deployment_id"`
	EventType    sql.NullString `json:"event_type"`
	Message      sql.NullString `json:"message"`
}

func (q *Queries) CreateDeploymentEvent(ctx context.Context, arg CreateDeploymentEventParams) (DeploymentEvent, error) {
	row := q.db.QueryRow(ctx, createDeploymentEvent,
		arg.UserID,
		arg.DeploymentID,
		arg.EventType,
		arg.Message,
	)
	var i DeploymentEvent
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.DeploymentID,
		&i.Message,
		&i.EventType,
	)
	return i, err
}

const listDeploymentEvents = `-- name: ListDeploymentEvents :many
SELECT id, created_at, user_id, deployment_id, message, event_type FROM deployment_events
WHERE user_id = $1 and deployment_id = $2
ORDER BY created_at
`

type ListDeploymentEventsParams struct {
	UserID       uuid.NullUUID `json:"user_id"`
	DeploymentID uuid.NullUUID `json:"deployment_id"`
}

func (q *Queries) ListDeploymentEvents(ctx context.Context, arg ListDeploymentEventsParams) ([]DeploymentEvent, error) {
	rows, err := q.db.Query(ctx, listDeploymentEvents, arg.UserID, arg.DeploymentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeploymentEvent
	for rows.Next() {
		var i DeploymentEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.DeploymentID,
			&i.Message,
			&i.EventType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserEvents = `-- name: ListUserEvents :many
SELECT id, created_at, user_id, deployment_id, message, event_type FROM deployment_events
WHERE user_id = $1
ORDER BY created_at
`

func (q *Queries) ListUserEvents(ctx context.Context, userID uuid.NullUUID) ([]DeploymentEvent, error) {
	rows, err := q.db.Query(ctx, listUserEvents, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeploymentEvent
	for rows.Next() {
		var i DeploymentEvent
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.DeploymentID,
			&i.Message,
			&i.EventType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
