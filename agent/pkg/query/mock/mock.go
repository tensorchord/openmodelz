// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/query/querier.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	query "github.com/tensorchord/openmodelz/agent/pkg/query"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateDeploymentEvent mocks base method.
func (m *MockQuerier) CreateDeploymentEvent(ctx context.Context, arg query.CreateDeploymentEventParams) (query.DeploymentEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeploymentEvent", ctx, arg)
	ret0, _ := ret[0].(query.DeploymentEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeploymentEvent indicates an expected call of CreateDeploymentEvent.
func (mr *MockQuerierMockRecorder) CreateDeploymentEvent(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeploymentEvent", reflect.TypeOf((*MockQuerier)(nil).CreateDeploymentEvent), ctx, arg)
}

// ListDeploymentEvents mocks base method.
func (m *MockQuerier) ListDeploymentEvents(ctx context.Context, arg query.ListDeploymentEventsParams) ([]query.DeploymentEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentEvents", ctx, arg)
	ret0, _ := ret[0].([]query.DeploymentEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentEvents indicates an expected call of ListDeploymentEvents.
func (mr *MockQuerierMockRecorder) ListDeploymentEvents(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentEvents", reflect.TypeOf((*MockQuerier)(nil).ListDeploymentEvents), ctx, arg)
}

// ListUserEvents mocks base method.
func (m *MockQuerier) ListUserEvents(ctx context.Context, userID uuid.NullUUID) ([]query.DeploymentEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserEvents", ctx, userID)
	ret0, _ := ret[0].([]query.DeploymentEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserEvents indicates an expected call of ListUserEvents.
func (mr *MockQuerierMockRecorder) ListUserEvents(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserEvents", reflect.TypeOf((*MockQuerier)(nil).ListUserEvents), ctx, userID)
}
