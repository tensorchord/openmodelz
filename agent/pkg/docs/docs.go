// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "modelz support",
            "url": "https://github.com/tensorchord/openmodelz",
            "email": "modelz-support@tensorchord.ai"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/gradio/{id}": {
            "get": {
                "description": "Reverse proxy to the backend gradio.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Reverse proxy to the backend gradio.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            },
            "post": {
                "description": "Reverse proxy to the backend gradio.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Reverse proxy to the backend gradio.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Healthz",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Healthz",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/inference/{name}": {
            "get": {
                "description": "Inference proxy.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference-proxy"
                ],
                "summary": "Inference.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "inference id",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "303": {
                        "description": "See Other"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "description": "Inference proxy.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference-proxy"
                ],
                "summary": "Inference.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "inference id",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "303": {
                        "description": "See Other"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Inference proxy.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference-proxy"
                ],
                "summary": "Inference.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "inference id",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "303": {
                        "description": "See Other"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "description": "Inference proxy.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference-proxy"
                ],
                "summary": "Inference.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "inference id",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "303": {
                        "description": "See Other"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/mosec/{id}": {
            "get": {
                "description": "Proxy to the backend mosec.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Proxy to the backend mosec.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/mosec/{id}/inference": {
            "post": {
                "description": "Proxy to the backend mosec.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Proxy to the backend mosec.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/mosec/{id}/metrics": {
            "get": {
                "description": "Proxy to the backend mosec.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Proxy to the backend mosec.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/other/{id}": {
            "get": {
                "description": "Reverse proxy to the backend other.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Reverse proxy to the backend other.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            },
            "post": {
                "description": "Reverse proxy to the backend other.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Reverse proxy to the backend other.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/streamlit/{id}": {
            "get": {
                "description": "Reverse proxy to streamlit.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Reverse proxy to streamlit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            },
            "post": {
                "description": "Reverse proxy to streamlit.",
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Reverse proxy to streamlit.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Deployment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/system/build": {
            "get": {
                "description": "List the builds.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "build"
                ],
                "summary": "List the builds.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Build"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create the build.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "build"
                ],
                "summary": "Create the build.",
                "parameters": [
                    {
                        "description": "build",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.Build"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Build"
                        }
                    }
                }
            }
        },
        "/system/build/{name}": {
            "get": {
                "description": "Get the build by name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "build"
                ],
                "summary": "Get the build by name.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "inference id",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.Build"
                        }
                    }
                }
            }
        },
        "/system/image-cache": {
            "post": {
                "description": "Create the image cache.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "image-cache"
                ],
                "summary": "Create the image cache.",
                "parameters": [
                    {
                        "description": "image-cache",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ImageCache"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.ImageCache"
                        }
                    }
                }
            }
        },
        "/system/inference/{name}": {
            "get": {
                "description": "Get the inference by name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Get the inference by name.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "inference id",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.InferenceDeployment"
                        }
                    }
                }
            }
        },
        "/system/inference/{name}/instance/{instance}": {
            "post": {
                "description": "Attach to the inference instance.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Attach to the inference instance.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Instance name",
                        "name": "instance",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.InferenceDeployment"
                            }
                        }
                    }
                }
            }
        },
        "/system/inference/{name}/instances": {
            "get": {
                "description": "List the inference instances.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "List the inference instances.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.InferenceDeployment"
                            }
                        }
                    }
                }
            }
        },
        "/system/inferences": {
            "get": {
                "description": "List the inferences.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "List the inferences.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.InferenceDeployment"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update the inferences.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Update the inferences.",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InferenceDeployment"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.InferenceDeployment"
                        }
                    }
                }
            },
            "post": {
                "description": "Create the inferences.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Create the inferences.",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.InferenceDeployment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.InferenceDeployment"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete the inferences.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Delete the inferences.",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.DeleteFunctionRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/types.DeleteFunctionRequest"
                        }
                    }
                }
            }
        },
        "/system/info": {
            "get": {
                "description": "Get system info.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "system"
                ],
                "summary": "Get system info.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ProviderInfo"
                        }
                    }
                }
            }
        },
        "/system/logs/build": {
            "get": {
                "description": "Get the build logs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "log"
                ],
                "summary": "Get the build logs.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Build Name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Instance",
                        "name": "instance",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Tail",
                        "name": "tail",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Follow",
                        "name": "follow",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Since",
                        "name": "since",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Message"
                            }
                        }
                    }
                }
            }
        },
        "/system/logs/inference": {
            "get": {
                "description": "Get the inference logs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "log"
                ],
                "summary": "Get the inference logs.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Instance",
                        "name": "instance",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Tail",
                        "name": "tail",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Follow",
                        "name": "follow",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Since",
                        "name": "since",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "End",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.Message"
                            }
                        }
                    }
                }
            }
        },
        "/system/namespaces": {
            "get": {
                "description": "List the namespaces.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "List the namespaces.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create the namespace.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Create the namespace.",
                "parameters": [
                    {
                        "description": "Namespace name",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.NamespaceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.NamespaceRequest"
                        }
                    }
                }
            }
        },
        "/system/scale-inference": {
            "post": {
                "description": "Scale the inferences.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "inference"
                ],
                "summary": "Scale the inferences.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Namespace",
                        "name": "namespace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ScaleServiceRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.ScaleServiceRequest"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/system/server/{name}/delete": {
            "delete": {
                "description": "Delete a node.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "Delete a node from the cluster.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/system/server/{name}/labels": {
            "post": {
                "description": "List the servers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "List the servers.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.ServerSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/system/servers": {
            "get": {
                "description": "List the servers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "namespace"
                ],
                "summary": "List the servers.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.AuthN": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "types.Build": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/types.BuildSpec"
                },
                "status": {
                    "$ref": "#/definitions/types.BuildStatus"
                }
            }
        },
        "types.BuildSpec": {
            "type": "object",
            "properties": {
                "authn": {
                    "$ref": "#/definitions/types.AuthN"
                },
                "branch": {
                    "type": "string"
                },
                "buildTarget": {
                    "$ref": "#/definitions/types.BuildTarget"
                },
                "image": {
                    "type": "string"
                },
                "image_tag": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "repository": {
                    "description": "repository is the URL",
                    "type": "string"
                },
                "revision": {
                    "description": "revision is the commit hash for the specified revision.\n+optional",
                    "type": "string"
                },
                "secret_id": {
                    "type": "string"
                }
            }
        },
        "types.BuildStatus": {
            "type": "object",
            "properties": {
                "phase": {
                    "type": "string"
                }
            }
        },
        "types.BuildTarget": {
            "type": "object",
            "properties": {
                "builder": {
                    "type": "string"
                },
                "digest": {
                    "type": "string"
                },
                "directory": {
                    "description": "directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.\n+optional",
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "image_tag": {
                    "type": "string"
                },
                "registry": {
                    "type": "string"
                },
                "registry_token": {
                    "type": "string"
                }
            }
        },
        "types.DeleteFunctionRequest": {
            "type": "object",
            "properties": {
                "functionName": {
                    "type": "string"
                }
            }
        },
        "types.ImageCache": {
            "type": "object",
            "properties": {
                "force_full_cache": {
                    "type": "boolean"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the inference.",
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "node_selector": {
                    "type": "string"
                }
            }
        },
        "types.InferenceDeployment": {
            "type": "object",
            "properties": {
                "spec": {
                    "$ref": "#/definitions/types.InferenceDeploymentSpec"
                },
                "status": {
                    "$ref": "#/definitions/types.InferenceDeploymentStatus"
                }
            }
        },
        "types.InferenceDeploymentSpec": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "Annotations are key-value pairs that may be attached to the inference.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "command": {
                    "description": "Command to run when starting the",
                    "type": "string"
                },
                "constraints": {
                    "description": "Constraints are the constraints for the inference.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "envVars": {
                    "description": "EnvVars can be provided to set environment variables for the inference runtime.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "framework": {
                    "description": "Framework is the inference framework.",
                    "type": "string"
                },
                "http_probe_path": {
                    "description": "HTTPProbePath is the path of the http probe.",
                    "type": "string"
                },
                "image": {
                    "description": "Image is a fully-qualified container image",
                    "type": "string"
                },
                "labels": {
                    "description": "Labels are key-value pairs that may be attached to the inference.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the inference.",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace for the inference.",
                    "type": "string"
                },
                "port": {
                    "description": "Port is the port exposed by the inference.",
                    "type": "integer"
                },
                "resources": {
                    "description": "Resources are the compute resource requirements.",
                    "$ref": "#/definitions/types.ResourceRequirements"
                },
                "scaling": {
                    "description": "Scaling is the scaling configuration for the inference.",
                    "$ref": "#/definitions/types.ScalingConfig"
                },
                "secrets": {
                    "description": "Secrets list of secrets to be made available to inference.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "types.InferenceDeploymentStatus": {
            "type": "object",
            "properties": {
                "availableReplicas": {
                    "description": "AvailableReplicas is the count of replicas ready to receive\ninvocations as reported by the faas-provider",
                    "type": "integer"
                },
                "createdAt": {
                    "description": "CreatedAt is the time read back from the faas backend's\ndata store for when the function or its container was created.",
                    "type": "string"
                },
                "eventMessage": {
                    "description": "EventMessage record human readable message indicating details about the event of deployment.",
                    "type": "string"
                },
                "invocationCount": {
                    "description": "InvocationCount count of invocations",
                    "type": "integer"
                },
                "phase": {
                    "type": "string"
                },
                "replicas": {
                    "description": "Replicas desired within the cluster",
                    "type": "integer"
                },
                "usage": {
                    "description": "Usage represents CPU and RAM used by all of the\nfunctions' replicas. Divide by AvailableReplicas for an\naverage value per replica.",
                    "$ref": "#/definitions/types.InferenceUsage"
                }
            }
        },
        "types.InferenceUsage": {
            "type": "object",
            "properties": {
                "cpu": {
                    "description": "CPU is the increase in CPU usage since the last measurement\nequivalent to Kubernetes' concept of millicores.",
                    "type": "number"
                },
                "gpu": {
                    "type": "number"
                },
                "totalMemoryBytes": {
                    "description": "TotalMemoryBytes is the total memory usage in bytes.",
                    "type": "number"
                }
            }
        },
        "types.Message": {
            "type": "object",
            "properties": {
                "instance": {
                    "description": "instance is the name/id of the specific function instance",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the function name",
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "text": {
                    "description": "Text is the raw log message content",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Timestamp is the timestamp of when the log message was recorded",
                    "type": "string"
                }
            }
        },
        "types.NamespaceRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "types.ProviderInfo": {
            "type": "object",
            "properties": {
                "orchestration": {
                    "type": "string"
                },
                "provider": {
                    "type": "string"
                },
                "version": {
                    "$ref": "#/definitions/types.VersionInfo"
                }
            }
        },
        "types.ResourceList": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "types.ResourceRequirements": {
            "type": "object",
            "properties": {
                "limits": {
                    "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "$ref": "#/definitions/types.ResourceList"
                },
                "requests": {
                    "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\n+optional",
                    "$ref": "#/definitions/types.ResourceList"
                }
            }
        },
        "types.ScaleServiceRequest": {
            "type": "object",
            "properties": {
                "eventMessage": {
                    "type": "string"
                },
                "replicas": {
                    "type": "integer"
                },
                "serviceName": {
                    "type": "string"
                }
            }
        },
        "types.ScalingConfig": {
            "type": "object",
            "properties": {
                "max_replicas": {
                    "description": "MaxReplicas is the upper limit for the number of replicas to which the\nautoscaler can scale up. It cannot be less that minReplicas. It defaults\nto 1.",
                    "type": "integer"
                },
                "min_replicas": {
                    "description": "MinReplicas is the lower limit for the number of replicas to which the\nautoscaler can scale down. It defaults to 0.",
                    "type": "integer"
                },
                "startup_duration": {
                    "description": "StartupDuration is the duration (in seconds) of startup time.",
                    "type": "integer"
                },
                "target_load": {
                    "description": "TargetLoad is the target load. In capacity mode, it is the expected number of the inflight requests per replica.",
                    "type": "integer"
                },
                "type": {
                    "description": "Type is the scaling type. It can be either \"capacity\" or \"rps\". Default is \"capacity\".",
                    "type": "string"
                },
                "zero_duration": {
                    "description": "ZeroDuration is the duration (in seconds) of zero load before scaling down to zero. Default is 5 minutes.",
                    "type": "integer"
                }
            }
        },
        "types.ServerSpec": {
            "type": "object",
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.VersionInfo": {
            "type": "object",
            "properties": {
                "build_date": {
                    "type": "string"
                },
                "compiler": {
                    "type": "string"
                },
                "git_commit": {
                    "type": "string"
                },
                "git_tag": {
                    "type": "string"
                },
                "git_tree_state": {
                    "type": "string"
                },
                "go_version": {
                    "type": "string"
                },
                "platform": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "v0.0.23",
	Host:             "localhost:8081",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "modelz cluster agent",
	Description:      "modelz kubernetes cluster agent",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
