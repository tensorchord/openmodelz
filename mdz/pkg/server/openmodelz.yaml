---
# Source: openmodelz/templates/ingress-operator-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ingress-operator
  namespace: "openmodelz"
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: ingress-operator
    heritage: Helm
    release: release-name
---
# Source: openmodelz/templates/modelzetes-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-operator
  namespace: "openmodelz"
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: openmodelz-operator
    heritage: Helm
    release: release-name
---
# Source: openmodelz/templates/prometheus-rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-prometheus
  namespace: "openmodelz"
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: prometheus
    heritage: Helm
    release: release-name
---
# Source: openmodelz/templates/prometheus-cfg.yaml
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: prometheus-config
    heritage: Helm
    release: release-name
  name: prometheus-config
  namespace: "openmodelz"
data:
  prometheus.yml: |
    global:
      scrape_interval:     15s
      evaluation_interval: 15s
      external_labels:
          monitor: 'faas-monitor'

    rule_files:
        - 'alert.rules.yml'
        - 'prometheus-rules.yml'

    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093

    scrape_configs:
      - job_name: 'prometheus'
        scrape_interval: 10s
        static_configs:
          - targets: ['localhost:9090']

      # Capture endpoints in the modelz namespace with a scrape annotation
      # such as the gateway-provider service.
      - job_name: 'modelz-endpoints'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          separator: ;
          regex: ([^:]+)(?::\d+)?;(\d+)
          target_label: __address__
          replacement: $1:$2
          action: replace

        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        # - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_port]
        #   action: keep
        #   regex: true

      - job_name: 'kubernetes-pods'
        scrape_interval: 5s
        honor_labels: false
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_path
          target_label: __metrics_path__

      - job_name: "service_kube-state-metrics"
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
          action: keep
          regex: kube-state-metrics
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: service

      - job_name: 'kubernetes-resource-metrics'
        scrape_interval: 10s
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/resource
        metric_relabel_configs:
        - source_labels: [__name__]
          regex: (pod)_(cpu|memory)_(.+)
          action: keep
        # Exclude container metrics
        - source_labels: [__name__]
          regex: container_(.+)
          action: drop
        - action: replace
          source_labels:
          - namespace
          regex: '(.*)'
          replacement: '$1'
          target_label: kubernetes_namespace
        # Output deployment name from Pod
        - action: replace
          source_labels:
          - pod
          regex: '^([0-9a-zA-Z-]+)+(-[0-9a-zA-Z]+-[0-9a-zA-Z]+)$'
          replacement: '$1'
          target_label: deployment_name
        # Output fully-qualified function name fn.ns
        - source_labels: [deployment_name, kubernetes_namespace]
          separator: ";"
          regex: '(.*);(.*)'
          replacement: '${1}.${2}'
          target_label: "inference_name"
      
      - job_name: 'nvidia-dcgm'
        scrape_interval: 10s
        static_configs:
          - targets: ['localhost:9400']

      - job_name: kubernetes-cadvisor
        honor_timestamps: true
        scrape_interval: 15s
        scrape_timeout: 10s
        metrics_path: /metrics/cadvisor
        scheme: https
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc.cluster.local:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor 
       
      - job_name: kubernetes-kubelet
        honor_timestamps: true
        scrape_interval: 15s
        scrape_timeout: 10s
        metrics_path: /metrics
        scheme: https
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        kubernetes_sd_configs:
        - role: node
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc.cluster.local:443
        - target_label: __metrics_path__
          source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          replacement: /api/v1/nodes/${1}/proxy/metrics

  alert.rules.yml: |
    groups:
      - name: modelz
        rules:
        - alert: service_down
          expr: up == 0

  prometheus-rules.yml: |
    groups:
    - name: load
      rules:
      - record: job:inference_current_load:sum
        expr: sum by (inference_name) ( rate( gateway_inference_invocation_total{}[30s] ) )  and avg by (inference_name) (gateway_service_target_load{scaling_type="rps"}) > 1
        labels:
          scaling_type: rps

      - record: job:inference_current_load:sum
        expr: sum by (inference_name) ( max_over_time( gateway_inference_invocation_inflight[45s:5s])) and on (inference_name) avg by(inference_name) (gateway_service_target_load{scaling_type="capacity"}) > bool 1
        labels:
          scaling_type: capacity

      - record: job:inference_current_load:sum
        expr: sum(irate ( pod_cpu_usage_seconds_total{}[1m])*1000) by (inference_name) * on (inference_name) avg by (inference_name) (gateway_service_target_load{scaling_type="cpu"}  > bool 1 )
        labels:
          scaling_type: cpu

    - name: recently_started_1m
      interval: 10s
      rules:
      - record: job:inference_current_started:max_sum
        expr: max_over_time(sum by (inference_name) (rate( gateway_inference_invocation_started{}[1m]))[1m:5s]) > 0
    - name: inspectors
      interval: 10s
      rules:
      - record: pod_restart_count_over_2_10m
        expr: (sum by (pod,namespace) (increase(kube_pod_container_status_restarts_total{namespace=~"modelz-(.*)"}[10m])) > 2) * on (pod) group_left(inference_name) (label_join(label_replace(kube_pod_info{created_by_kind="ReplicaSet",namespace=~"modelz-(.*)"}, "inference", "$1", "created_by_name", "(.+)-.+"), "inference_name",".","inference","namespace"))
    - name: resources
      interval: 10s
      rules:
      - record: pod_cpu_usage_5m
        expr: label_replace(sum(rate(pod_cpu_usage_seconds_total{}[5m])) by (pod, namespace,inference_name), "inference", "$1", "inference_name", "(.+)-.+")*100
      - record: pod_memory_usage_5m
        expr: label_replace(sum(rate(pod_memory_working_set_bytes{}[5m])) by (pod, namespace,inference_name), "inference", "$1", "inference_name", "(.+)-.+")/2^20
      - record: pod_gpu_utilization
        expr: sum(DCGM_FI_DEV_GPU_UTIL{namespace!=""}) by (pod, namespace, modelName)
      - record: pod_gpu_memory_usage
        expr: sum(DCGM_FI_DEV_FB_USED{namespace!=""}) by (pod, namespace, modelName)
      - record: pod_gpu_memory_utilization
        expr: sum(DCGM_FI_DEV_MEM_COPY_UTIL{namespace!=""}) by (pod, namespace, modelName)
      - record: pod_network_write
        expr: sum(rate(container_network_receive_bytes_total{container!="POD"}[5m])) by (pod, namespace) / 2^20
      - record: pod_network_read
        expr: sum(rate(container_network_transmit_bytes_total{container!="POD"}[5m])) by (pod, namespace) / 2^20
      - record: pod_disk_write
        expr: sum(rate(container_fs_writes_bytes_total{container!="POD"}[5m])) by (pod, namespace) / 2^20
      - record: pod_disk_read
        expr: sum(rate(container_fs_reads_bytes_total{container!="POD"}[5m])) by (pod, namespace) / 2^20
---
# Source: openmodelz/templates/ingress-operator-crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: ingress-operator
    heritage: Helm
    release: release-name
  name: inferenceingresses.tensorchord.ai
spec:
  group: tensorchord.ai
  names:
    kind: InferenceIngress
    listKind: InferenceIngressList
    plural: inferenceingresses
    singular: inferenceingress
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.domain
          name: Domain
          type: string
      name: v1
      schema:
        openAPIV3Schema:
          description: InferenceIngress describes an OpenFaaS function
          type: object
          required:
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: InferenceIngressSpec is the spec for a InferenceIngressSpec resource. It must be created in the same namespace as the gateway, i.e. openfaas.
              type: object
              required:
                - domain
                - framework
                - function
              properties:
                bypassGateway:
                  description: BypassGateway, when true creates an Ingress record directly for the Function name without using the gateway in the hot path
                  type: boolean
                domain:
                  description: Domain such as "api.example.com"
                  type: string
                framework:
                  type: string
                function:
                  description: Function such as "nodeinfo"
                  type: string
                ingressType:
                  description: IngressType such as "nginx"
                  type: string
                path:
                  description: Path such as "/v1/profiles/view/(.*)", or leave empty for default
                  type: string
                tls:
                  description: Enable TLS via cert-manager
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    issuerRef:
                      description: ObjectReference is a reference to an object with a given name and kind.
                      type: object
                      required:
                        - name
                      properties:
                        kind:
                          type: string
                        name:
                          type: string
      served: true
      storage: true
      subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openmodelz/templates/modelzetes-crd.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: inferences.tensorchord.ai
spec:
  group: tensorchord.ai
  names:
    kind: Inference
    listKind: InferenceList
    plural: inferences
    singular: inference
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .spec.image
          name: Image
          type: string
      name: v2alpha1
      schema:
        openAPIV3Schema:
          description: Inference describes an Inference
          type: object
          required:
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: InferenceSpec defines the desired state of Inference
              type: object
              required:
                - image
                - name
              properties:
                annotations:
                  description: Annotations are metadata for inferences which may be used by the faas-provider or the gateway
                  type: object
                  additionalProperties:
                    type: string
                command:
                  description: Command to run when starting the
                  type: string
                constraints:
                  description: Constraints are specific to the operator.
                  type: array
                  items:
                    type: string
                envVars:
                  description: EnvVars can be provided to set environment variables for the inference runtime.
                  type: object
                  additionalProperties:
                    type: string
                framework:
                  description: Framework is the inference framework.
                  type: string
                http_probe_path:
                  description: HTTPProbePath is the path of the http probe.
                  type: string
                image:
                  type: string
                labels:
                  description: Labels are metadata for inferences which may be used by the faas-provider or the gateway
                  type: object
                  additionalProperties:
                    type: string
                name:
                  type: string
                port:
                  description: Port is the port exposed by the inference.
                  type: integer
                  format: int32
                resources:
                  description: Limits for inference
                  type: object
                  properties:
                    claims:
                      description: "Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. \n This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. \n This field is immutable. It can only be set for containers."
                      type: array
                      items:
                        description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                        type: object
                        required:
                          - name
                        properties:
                          name:
                            description: Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
                            type: string
                      x-kubernetes-list-map-keys:
                        - name
                      x-kubernetes-list-type: map
                    limits:
                      description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                      additionalProperties:
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        anyOf:
                          - type: integer
                          - type: string
                        x-kubernetes-int-or-string: true
                    requests:
                      description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                      type: object
                      additionalProperties:
                        pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                        anyOf:
                          - type: integer
                          - type: string
                        x-kubernetes-int-or-string: true
                scaling:
                  description: Scaling is the scaling configuration for the inference.
                  type: object
                  properties:
                    max_replicas:
                      description: MaxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas. It defaults to 1.
                      type: integer
                      format: int32
                    min_replicas:
                      description: MinReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 0.
                      type: integer
                      format: int32
                    startup_duration:
                      description: StartupDuration is the duration of startup time.
                      type: integer
                      format: int32
                    target_load:
                      description: TargetLoad is the target load. In capacity mode, it is the expected number of the inflight requests per replica.
                      type: integer
                      format: int32
                    type:
                      description: Type is the scaling type. It can be either "capacity" or "rps". Default is "capacity".
                      type: string
                    zero_duration:
                      description: ZeroDuration is the duration of zero load before scaling down to zero. Default is 5 minutes.
                      type: integer
                      format: int32
                secrets:
                  description: Secrets list of secrets to be made available to inference
                  type: array
                  items:
                    type: string
      served: true
      storage: true
      subresources: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: openmodelz/templates/ingress-operator-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: ingress-operator-rw
  namespace: "openmodelz"
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: ingress-operator
    heritage: Helm
    release: release-name
rules:
- apiGroups: ["tensorchord.ai"]
  resources: ["inferenceingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["certmanager.k8s.io"]
  resources: ["certificates"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["pods", "pods/log", "namespaces", "endpoints"]
  verbs: ["get", "list", "watch"]
---
# Source: openmodelz/templates/modelzetes-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-clusterrole-operator
  namespace: "openmodelz"
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: openmodelz-operator
    heritage: Helm
    release: release-name
rules:
  - apiGroups: ["tensorchord.ai"]
    resources: ["inferenceingresses"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["tensorchord.ai"]
    resources: ["inferences"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: ["extensions", "apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods", "pods/log", "endpoints"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/portforward", "pods/exec"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "watch", "list"]
---
# Source: openmodelz/templates/prometheus-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-prometheus
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: prometheus
    heritage: Helm
    release: release-name
rules:
- apiGroups: [""]
  resources:
    - services
    - endpoints
    - pods
    - nodes
    - nodes/proxy
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
# Source: openmodelz/templates/ingress-operator-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ingress-operator-rw
  namespace: "openmodelz"
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: ingress-operator
    heritage: Helm
    release: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-operator-rw
subjects:
- kind: ServiceAccount
  name: ingress-operator
  namespace: "openmodelz"
---
# Source: openmodelz/templates/modelzetes-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-clusterrole-operator
  namespace: "openmodelz"
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: openmodelz-operator
    heritage: Helm
    release: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-clusterrole-operator
subjects:
- kind: ServiceAccount
  name: release-name-operator
  namespace: "openmodelz"
---
# Source: openmodelz/templates/prometheus-rbac.yaml
# Cluster binding for node discovery and node-level metrics
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: release-name-nodemetrics-prometheus
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: prometheus
    heritage: Helm
    release: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-prometheus
subjects:
- kind: ServiceAccount
  name: release-name-prometheus
  namespace: "openmodelz"
---
# Source: openmodelz/templates/modelzetes-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-operator-rw
  namespace: "openmodelz"
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: openmodelz-operator
    heritage: Helm
    release: release-name
rules:
- apiGroups: ["tensorchord.ai"]
  resources: ["inferenceingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["tensorchord.ai"]
  resources: ["inferences"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps", "extensions"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["pods", "pods/log", "namespaces", "endpoints"]
  verbs: ["get", "list", "watch"]
---
# Source: openmodelz/templates/modelzetes-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-operator-rw
  namespace: "openmodelz"
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: openmodelz-operator
    heritage: Helm
    release: release-name
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-operator-rw
subjects:
- kind: ServiceAccount
  name: release-name-operator
  namespace: "openmodelz"
---
# Source: openmodelz/templates/modelzetes-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: openmodelz-operator
    heritage: Helm
    release: release-name
  name: release-name-profiles
  namespace: "openmodelz"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-profiles
subjects:
  - kind: ServiceAccount
    name: release-name-operator
    namespace: "openmodelz"
---
# Source: openmodelz/templates/agent-external-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: agent
    heritage: Helm
    release: release-name
  name: agent-external
  namespace: "openmodelz"
spec:
  type: NodePort
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
      nodePort: 31112
  selector:
    app: agent
---
# Source: openmodelz/templates/agent-provider-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: agent-provider
  namespace: "openmodelz"
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8081"
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: agent
    heritage: Helm
    release: release-name
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8081
      targetPort: http
      protocol: TCP
  selector:
    app: agent
---
# Source: openmodelz/templates/agent-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: agent
    heritage: Helm
    release: release-name
  name: agent
  namespace: "openmodelz"
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
  selector:
    app: agent
---
# Source: openmodelz/templates/autoscaler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: autoscaler
    heritage: Helm
    release: release-name
  name: autoscaler
  namespace: "openmodelz"
spec:
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: autoscaler
---
# Source: openmodelz/templates/prometheus-svc.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: prometheus
    heritage: Helm
    release: release-name
  name: prometheus
  namespace: "openmodelz"
spec:
  type: ClusterIP
  ports:
    - port: 9090
      protocol: TCP
  selector:
    app: prometheus
---
# Source: openmodelz/templates/agent-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: agent
    heritage: Helm
    release: release-name
  name: agent
  namespace: "openmodelz"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: agent
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
      labels:
        app: agent
    spec:
      priorityClassName: modelz
      serviceAccountName: release-name-operator
      containers:
      - name: agent
        resources:
            limits:
              cpu: "2"
              memory: 8Gi
            requests:
              cpu: 100m
              memory: 120Mi
        image: modelzai/openmodelz-agent:v0.0.7
        imagePullPolicy: Always
        command:
          - /usr/bin/agent
          - --debug
        securityContext:
          readOnlyRootFilesystem: true
          runAsUser: 10001
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          httpGet:
            path: /healthz
            port: 8080
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          httpGet:
            path: /healthz
            port: 8080
        env:
        - name: MODELZ_AGENT_SERVER_PORT
          value: "8080"
        - name: MODELZ_AGENT_SERVER_READ_TIMEOUT
          value: "305s"
        - name: MODELZ_AGENT_SERVER_WRITE_TIMEOUT
          value: "305s"
        - name: MODELZ_AGENT_METRICS_PROMETHEUS_PORT
          value: "9090"
        - name: MODELZ_AGENT_METRICS_PROMETHEUS_HOST
          value: "prometheus.openmodelz"
        - name: MODELZ_AGENT_EVENT_ENABLED
          value: "false"
        - name: MODELZ_AGENT_INGRESS_ENABLED
          value: "true"
        - name: MODELZ_AGENT_INGRESS_NAMESPACE
          value: "openmodelz"
        - name: MODELZ_AGENT_INGRESS_ANY_IP_TO_DOMAIN
          value: "true"
        volumeMounts:
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
---
# Source: openmodelz/templates/autoscaler-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: autoscaler
    heritage: Helm
    release: release-name
  name: autoscaler
  namespace: "openmodelz"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: autoscaler
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "false"
      labels:
        app: autoscaler
    spec:
      priorityClassName: modelz
      volumes:
      containers:
      - name:  autoscaler
        resources:
            limits:
              cpu: 500m
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 128Mi
        image: modelzai/openmodelz-autoscaler:v0.0.7
        imagePullPolicy: Always
        command:
          - "/usr/bin/autoscaler"
          - --debug
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          httpGet:
            path: /system/info
            port: 8080
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          httpGet:
            path: /system/info
            port: 8080
        env:
        - name: MODELZ_GATEWAY_HOST
          value: "http://agent.openmodelz:8080"
        - name: MODELZ_PROMETHEUS_HOST
          value: "prometheus.openmodelz"
        - name: MODELZ_PROMETHEUS_PORT
          value: "9090"
        - name: MODELZ_BASIC_AUTH
          value: "false"
---
# Source: openmodelz/templates/ingress-operator-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: ingress-operator
    heritage: Helm
    release: release-name
  name: ingress-operator
  namespace: "openmodelz"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-operator
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
      labels:
        app: ingress-operator
    spec:
      priorityClassName: modelz
      serviceAccountName: ingress-operator
      containers:
      - name: operator
        command:
          - /usr/bin/ingress-operator
          - --host
          - "agent"
          - --namespace
          - "openmodelz"
          - --debug
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
          requests:
            cpu: 50m
            memory: 128Mi
        image: modelzai/openmodelz-ingress-operator:v0.0.7
        imagePullPolicy: Always
---
# Source: openmodelz/templates/modelzetes-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: modelzetes
    heritage: Helm
    release: release-name
  name: modelzetes
  namespace: "openmodelz"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: modelzetes
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
      labels:
        app: modelzetes
    spec:
      priorityClassName: modelz
      serviceAccountName: release-name-operator
      volumes:
      containers:
      - name: modelzetes
        resources:
            limits:
              cpu: 1000m
              memory: 3Gi
            requests:
              cpu: 100m
              memory: 120Mi
        image: modelzai/openmodelz-modelzetes:v0.0.7
        imagePullPolicy: Always
        command:
          - /usr/bin/modelzetes
        env:
          - name: MODELZETES_INFERENCE_IMAGE_PULL_POLICY
            value: "IfNotPresent"
          - name: MODELZETES_PROBE_READINESS_INITIAL_DELAY_SECONDS
            value: "2"
          - name: MODELZETES_PROBE_READINESS_TIMEOUT_SECONDS
            value: "1"
          - name: MODELZETES_PROBE_READINESS_PERIOD_SECONDS
            value: "1"
          - name: MODELZETES_PROBE_LIVENESS_INITIAL_DELAY_SECONDS
            value: "2"
          - name: MODELZETES_PROBE_LIVENESS_TIMEOUT_SECONDS
            value: "1"
          - name: MODELZETES_PROBE_LIVENESS_PERIOD_SECONDS
            value: "1"
          - name: MODELZETES_PROBE_STARTUP_INITIAL_DELAY_SECONDS
            value: "0"
          - name: MODELZETES_PROBE_STARTUP_TIMEOUT_SECONDS
            value: "1"
          - name: MODELZETES_PROBE_STARTUP_PERIOD_SECONDS
            value: "2"
---
# Source: openmodelz/templates/prometheus-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: openmodelz
    chart: openmodelz-0.0.1
    component: prometheus
    heritage: Helm
    release: release-name
  name: prometheus
  namespace: "openmodelz"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
      annotations:
        sidecar.istio.io/inject: "true"
        checksum/prometheus-config: "dd17c0d368a7553eac2853f45e6feeeea893d1d29f3afd2c953ff675c4b6f191"
    spec:
      priorityClassName: modelz
      serviceAccountName: release-name-prometheus
      containers:
      - name: prometheus
        resources:
            limits:
              cpu: 1000m
              memory: 3Gi
            requests:
              cpu: 100m
              memory: 512Mi
        image: prom/prometheus:v2.41.0
        command:
          - "prometheus"
          - "--config.file=/etc/prometheus/prometheus.yml"
        imagePullPolicy: 
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          timeoutSeconds: 30
        ports:
        - containerPort: 9090
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
        - mountPath: /etc/prometheus/prometheus-rules.yml
          name: prometheus-config
          subPath: prometheus-rules.yml
        - mountPath: /etc/prometheus/alert.rules.yml
          name: prometheus-config
          subPath: alert.rules.yml
        - mountPath: /prometheus/data
          name: prom-data
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
            items:
              - key: prometheus.yml
                path: prometheus.yml
                mode: 0644
              - key: alert.rules.yml
                path: alert.rules.yml
                mode: 0644
              - key: prometheus-rules.yml
                path: prometheus-rules.yml
                mode: 0644
        - name: prom-data
          emptyDir: {}
---
# Source: openmodelz/templates/inference-pc.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: inference
value: 1e+06
globalDefault: false
description: "This priority class should be used for inference pods only."
---
# Source: openmodelz/templates/modelz-pc.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: modelz
value: 1e+07
preemptionPolicy: Never
globalDefault: false
description: "This priority class should be used for modelz only."
